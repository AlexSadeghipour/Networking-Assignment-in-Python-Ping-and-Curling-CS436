import threading
from scapy.packet import Packet
from scapy.sendrecv import send, sniff
from scapy.layers.inet import TCP, IP, Ether, ICMP

PRIVATE_IFACE = "eth0"
PRIVATE_IP = "10.0.0.2"

PUBLIC_IFACE = "eth1"
PUBLIC_IP = "172.16.20.2"

key = ""
tkey = 0

#Use old hash function from project last sememster to ensure the same id for each ip/id
port1 = 4269
pubPort = 1025
table = {}
def process_pkt_private(pkt: Packet):
    if pkt[IP].src != PUBLIC_IP or pkt[IP].src != PRIVATE_IP: #Check if the source is the router IP
        table[(PUBLIC_IP)] = pkt[IP].src #Storing the source of the packet into the hash table
        if ICMP in pkt:
            # Create a new IP packet with specified src and dst
            new_pkt = IP(src = PUBLIC_IP, dst= pkt[IP].dst)/pkt[ICMP]
            # Send the new packet over the public interface
            send(new_pkt, iface=PUBLIC_IFACE, verbose=False)
        elif TCP in pkt:
            table[(pubPort)] = pkt[IP].sport
            tkey = pkt[IP].sport
            # Create a new IP packet with specified src and dst
            new_pkt = IP(src = PUBLIC_IP, dst = pkt[IP].dst)/pkt[TCP]
            TCP(sport = port1, dport = pkt[IP].dport)
            #Delete checksum to help with program issues
            del new_pkt[TCP].chksum
            del new_pkt[IP].chksum
            # Send the new packet over the public interface
            send(new_pkt, iface=PUBLIC_IFACE, verbose=False)

def process_pkt_public(pkt: Packet):
    if pkt[IP].dst == PUBLIC_IP:
        global key
        global tkey
        if ICMP in pkt:
            # Create a new IP packet with specified src and dst
            key = pkt[IP].dst
            if key in table.keys():
                new_pkt = IP(src = pkt[IP].src, dst = table[key])/pkt[ICMP]
                # Send the new packet over the public interface
                send(new_pkt, iface=PRIVATE_IFACE, verbose=False)
        elif TCP in pkt:
            if pkt[IP].src != "129.114.26.193" and pkt[IP].dst != "129.114.26.193" and pkt[IP].src != "64.4.54.254" and pkt[IP].dst != "64.4.54.254" and pkt[IP].src != PUBLIC_IP:
                print(table)
                # Create a new IP packet with specified src and dst
                key = pkt[IP].dst
                dport = tkey
                    # Create a new IP packet with specified src and dst
                new_pkt = IP(src = pkt[IP].src, dst = table[key])/pkt[TCP]
                TCP(sport = pkt[IP].sport, dport = dport)
                    #TCP(sport = pkt[IP].sport, dport = table[tkey])
                    #Delete checksum to help with program issues
                del new_pkt[TCP].chksum
                del new_pkt[IP].chksum
                    # Send the new packet over the public interface
                send(new_pkt, iface=PRIVATE_IFACE, verbose=False)

def private_listener():
    print("sniffing packets on the private interface")
    sniff(prn=process_pkt_private, iface=PRIVATE_IFACE, filter="icmp or tcp")

def public_listener():
    print("sniffing packets on the public interface")
    sniff(prn=process_pkt_public, iface=PUBLIC_IFACE, filter="icmp or tcp")

def main():
    thread1 = threading.Thread(target=private_listener)
    thread2 = threading.Thread(target=public_listener)

    print("starting multiple sniffing threads...")
    thread1.start()
    thread2.start()
    thread1.join()
    thread2.join()

main()
#Goals
#Be listening at all tiumes on both servers
#Receive a packet at the router
#If it is public, change the information specific to that side of the NAT and then send the altered packet to the private side to the correct device
#If it is private, do the same thing but to the public side of the device